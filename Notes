DAY1

  OSI model 
    1. physical - hardware specifications, on/off switch, transmission/reception, encoding/signaling
    2. data link - where layer 1 devices communicate, uses MAC address, LLC
    3. network - (IP), headers basically. offsets n such
    4. transport - tcp/udp, 3-way handshake 
    5. session - maintatins connection,  
    6. presentation - translation, formatting, encoding, encryption, compression
    7. appllication - FTP, active/passive
  Stuff & Things 
    ssh - client/server authentication, symmetric session. data stream channeling, user/host - asymmetric
    sudo tcpdump "ether[12:2] = 0x800" -d *** berkeley packet fitler for something idk
    sudo tcpdump "tcp[13] & 0x01 = 0x01" *** packets with fin flag set
    i dont know what is going on fr
    
    switch - only destination MAC, fragment free - first 64 bytes, layer 2
          switch1#show mac address-table
          
    spanning tree protocol (STP) - elects root bridge, identifies root ports on non-root bridge, 
                                    and desig. port for each segment, alt ports to blocking state
    
    CDP - layer 2 discovery protocol
    Port security 0 shutdown, restrict, protect
    
    arpbroadcast=Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(op=1, pdst="172.16.82.115")
    arpspoofed=ARP(op=2, psrc="172.16.82.126", pdst="172.16.82.115", hwdst="fa:16:3e:24:20:44")
 
  Router Commands
    switch1#show mac-address table
    show ip route
    
    
DAY2
    Sockets & Such
      User Space - common, does not require priv esc. 
        nmap no switches, netcat, create listener above 1024, /dev/tcp(/udp) to transfer data
          stream - connection oriented, tcp ,sctp, bluetooth
          datagram - connectionless, speed, udp
      Kernel Space - used to prevent encap/decapsulation, require priv esc.
        tcpdump/wireshark to capture, nmap for enumeration, create lisenter -1023, scapy
          raw - direct in/out IP packets without auto protocol-specific formatting


      import socket
    s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)
    socket.socket([*family*[,*type*[*proto*]]])
    family constants should be: AF_INET (default), AF_INET6, AF_UNIX
    type constants should be: SOCK_STREAM (default), SOCK_DGRAM, SOCK_RAW
    proto constants should be: 0 (default), IPPROTO_RAW


  ip[8]=1&&(ip[9]=1||ip[9]=17)

    
DAY3
    uhh
    curl ip:port
    wget -r ftp://localhost
    nc -u
    eog
  
DAY4
    ftps - tcp port 443
    scp - tcp port 22
    download remote to local
    scp student@xxx.xxx.xxx.xxx:secrets.txt /home/student
    upload remote to local
    scp secrets.txt student@xxx.xxx.xxx.xxx:/home/student
    copy from remote to remote
    scp -3 student@xxx.xxx.xxx.2:/home/student/secrets.txt student@xxx.xxx.xxx.1:/home/student
    *** more syntax in slides

    client to listener
    Client (sends file): nc 10.2.0.2 9001 < file.txt
    Listener (receive file): nc -l -p 9001 > newfile.txt

    listener to client
    Listener (sends file): nc -l -p 9001 < file.txt32424    
    Client (receive file): nc 10.2.0.2 9001 > newfile.txt

    netcat file tranfer:
    on client
    mknod mypipe p
    nc 10.1.0.2 9002 0< mypipe | nc 10.2.0.2 9001 1> mypipe
    on listener 2 (sends)
    nc -l -p 9002 < infile.txt
    on listener 1 (recieves)
    nc -l -p 9001 > outfile.txt

    /dev/tcp file transfer
    on receiving box
    nc -l -p 1111 > file.txt
    on sending box
    cat file.txt > /dev/tcp/10.2.0.2/1111
    *** when netcat is not available
  
DAY5
ssh local port forwarding syntax
      ssh -p <optional alt port> <user>@<pivot ip> -L <local bind port>:<tgt ip>:<tgt port> -NT
      or
      ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<pivot ip> -NT

      Creates a local port (1111) on the local host that forwards to a target machine’s port 80.
      ssh student@172.16.82.106 -L 1111:localhost:80 -NT
      or
      ssh -L 1111:localhost:80 student@172.16.82.106 -NT

      Internet Host:
      ssh student@172.16.1.15 -L 1111:172.16.40.10:22 -NT
      ssh student@localhost -p 1111 -L 2222:172.16.82.106:80 -NT
      firefox localhost:2222
      Creates an additional local port on the local host that forwards to a target machine through the previous channel created
  
  
  
ssh dynamic port fowarding syntax *** allows scripts/userspace programs to be ran through tunnel
      ssh -D <port> -p <alt port> <user>@<pivot ip> -NT
        Blue Private Host-1:
      ssh student@172.16.82.106 -D 9050 -NT

      proxychains ./scan.sh
      proxychains ssh student@10.10.0.40


      proxychain commands are ran from blue private host, directed to 10.10.0.40
      Blue Private Host-1:
      ssh student@172.16.82.106 -L 1111:10.10.0.40:22 -NT
      ssh student@localhost -D 9050 -p 1111 -NT

      proxychains curl ftp://www.onlineftp.ch
      proxychains wget -r www.espn.com
      proxychains ./scan.sh
      proxychains ssh student@172.16.101.2
ssh remote port forwarding
      ssh -p <optional alt port> <user>@<remote ip> -R <remote bind port>:<tgt ip>:<tgt port> -NT
      or
      ssh -R <remote bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<remote ip> -NT
     Blue Host-1
      ssh student@10.10.0.40 -R 1111:localhost:80 -NT
        ***Creates a remote port on the remote’s local host that forwards to the target specified
     
     Blue Private Host-1:
      ssh student@172.16.82.106 -R 1111:localhost:22 -NT
     Internet Host:
      ssh student@172.16.82.106 -L 2222:localhost:1111 -NT
     Internet Host:
      ssh localhost -p 2222
        ***Creates a remote port on a remote machine, staging a connection
        ***Also creates a local port on the localhost to connect to the previously staged connection.
   for i in {1..254} ;do (ping -c <NID>.$1 2>/dev/null | grep "bytes from" &) ;done
        
        
        
        
DAY6
      Configuring iptables
      iptables - IPv4 packet administration link::http://ipset.netfilter.org/iptables.man.html[(Manual)], link::http://ipset.netfilter.org/iptables-extensions.man.html[(Manual Extensions)]
      ip6tables - IPv6 packet administration link::http://ipset.netfilter.org/ip6tables.man.html[(Manual)]
      ebtables - Ethernet Bridge frame table administration link::https://linux.die.net/man/8/ebtables[(Manual)]
      arptables - arp packet administration link::https://linux.die.net/man/8/arptables[(Manual)]
      filter - default table. Used to ACCEPT, DROP or REJECT packets that match. Provides packet filtering.
      INPUT, FORWARD, and OUTPUT
      nat - used to translate private ←→ public address and ports.
      PREROUTING, POSTROUTING, and OUTPUT
      mangle - provides special packet alteration. Can modify various fields header fields.
      All Chains: PREROUTING, POSTROUTING, INPUT, FORWARD and OUTPUT.
      raw - used to configure exemptions from connection tracking.
      PREROUTING and OUTPUT
      security - used for Mantator Access Control (MAC) networkign rules.
      INPUT, FORWARD, and OUTPUT
      iptables Syntax
      iptables -t [table] -A [chain] [rules] -j [action]
      Rules:
      -i or -o [iface]
      -s or -d [ip.add | network/mask]
      -p [protocol] [--dport | --sport] [port | port1:port2]
      -m is used with:
        state --state [state]
        mac [--mac-source | --mac-destination] [mac]
        multiport -p [tcp | udp] [--sport | --dport | --port]
                [port1,port2,..port15]
        bpf --bytecode [ 'bytecode' ]
      [action] - ACCEPT (default), REJECT, DROP
      Basic iptables options
      -A              #Append a rule (bottom of list)
      -I              #Insert a rule (top of list)
      -D              #Delete a rule Syntax: iptables -D [chain][rule_#]
      -L              #List the rules by chains
      -P              #Changes the default policy for a chain Syntax: iptables -P [chain] [target]
      -S              #Show rules
      -p              #list a potocol (tcp,icmp,sctp,etc.)
      --sport         #address a specific port number
      --dport
      -d              #Destination Address
      -s              #Source Address
      -j              #jump to target action
      -n              #displays port number vice protocol
      -t              #specifies a table, default is filter
      --line numbers  #prints the rule number in output
      Modify iptables
      iptables -t [table] -F                                                    #Flush table
      iptables -t [table] -P [chain] [action]                                   #Change default policy
      iptables -t [table] -L --line-numbers                                     #Lists rules with rule numbers
      iptables -t [table] -I [chain] [rule num] [rules] -j [action]             #Inserts rule before Rule number
      iptables -t [table] -R [chain] [rule num] [rules] -j [action]             #Replaces rule at number
      iptables -t [table] -D [chain] [rule num]                                 #Deletes rule at number
      
DAY7
      /etc/snort/rules
      
      
      
      
      
      
      
      
