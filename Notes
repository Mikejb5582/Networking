DAY1

  OSI model 
    1. physical - hardware specifications, on/off switch, transmission/reception, encoding/signaling
    2. data link - where layer 1 devices communicate, uses MAC address, LLC
    3. network - (IP), headers basically. offsets n such
    4. transport - tcp/udp, 3-way handshake 
    5. session - maintatins connection,  
    6. presentation - translation, formatting, encoding, encryption, compression
    7. appllication - FTP, active/passive
  Stuff & Things 
    ssh - client/server authentication, symmetric session. data stream channeling, user/host - asymmetric
    sudo tcpdump "ether[12:2] = 0x800" -d *** berkeley packet fitler for something idk
    sudo tcpdump "tcp[13] & 0x01 = 0x01" *** packets with fin flag set
    i dont know what is going on fr
    
    switch - only destination MAC, fragment free - first 64 bytes, layer 2
          switch1#show mac address-table
          
    spanning tree protocol (STP) - elects root bridge, identifies root ports on non-root bridge, 
                                    and desig. port for each segment, alt ports to blocking state
    
    CDP - layer 2 discovery protocol
    Port security 0 shutdown, restrict, protect
    
    arpbroadcast=Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(op=1, pdst="172.16.82.115")
    arpspoofed=ARP(op=2, psrc="172.16.82.126", pdst="172.16.82.115", hwdst="fa:16:3e:24:20:44")
 
  Router Commands
    switch1#show mac-address table
    show ip route
    
    
DAY2
    Sockets & Such
      User Space - common, does not require priv esc. 
        nmap no switches, netcat, create listener above 1024, /dev/tcp(/udp) to transfer data
          stream - connection oriented, tcp ,sctp, bluetooth
          datagram - connectionless, speed, udp
      Kernel Space - used to prevent encap/decapsulation, require priv esc.
        tcpdump/wireshark to capture, nmap for enumeration, create lisenter -1023, scapy
          raw - direct in/out IP packets without auto protocol-specific formatting


      import socket
    s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)
    socket.socket([*family*[,*type*[*proto*]]])
    family constants should be: AF_INET (default), AF_INET6, AF_UNIX
    type constants should be: SOCK_STREAM (default), SOCK_DGRAM, SOCK_RAW
    proto constants should be: 0 (default), IPPROTO_RAW


  ip[8]=1&&(ip[9]=1||ip[9]=17)

    
DAY3
    uhh
    curl ip:port
    wget -r ftp://localhost
    nc -u
    eog
  
DAY4
    ftps - tcp port 443
    scp - tcp port 22
    download remote to local
    scp student@xxx.xxx.xxx.xxx:secrets.txt /home/student
    upload remote to local
    scp secrets.txt student@xxx.xxx.xxx.xxx:/home/student
    copy from remote to remote
    scp -3 student@xxx.xxx.xxx.2:/home/student/secrets.txt student@xxx.xxx.xxx.1:/home/student
    *** more syntax in slides

    client to listener
    Client (sends file): nc 10.2.0.2 9001 < file.txt
    Listener (receive file): nc -l -p 9001 > newfile.txt

    listener to client
    Listener (sends file): nc -l -p 9001 < file.txt32424    
    Client (receive file): nc 10.2.0.2 9001 > newfile.txt

    netcat file tranfer:
    on client
    mknod mypipe p
    nc 10.1.0.2 9002 0< mypipe | nc 10.2.0.2 9001 1> mypipe
    on listener 2 (sends)
    nc -l -p 9002 < infile.txt
    on listener 1 (recieves)
    nc -l -p 9001 > outfile.txt

    /dev/tcp file transfer
    on receiving box
    nc -l -p 1111 > file.txt
    on sending box
    cat file.txt > /dev/tcp/10.2.0.2/1111
    *** when netcat is not available
  
DAY5
ssh local port forwarding syntax
      ssh -p <optional alt port> <user>@<pivot ip> -L <local bind port>:<tgt ip>:<tgt port> -NT
      or
      ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<pivot ip> -NT

      Creates a local port (1111) on the local host that forwards to a target machine’s port 80.
      ssh student@172.16.82.106 -L 1111:localhost:80 -NT
      or
      ssh -L 1111:localhost:80 student@172.16.82.106 -NT

      Internet Host:
      ssh student@172.16.1.15 -L 1111:172.16.40.10:22 -NT
      ssh student@localhost -p 1111 -L 2222:172.16.82.106:80 -NT
      firefox localhost:2222
      Creates an additional local port on the local host that forwards to a target machine through the previous channel created
  
  
  
ssh dynamic port fowarding syntax *** allows scripts/userspace programs to be ran through tunnel
      ssh -D <port> -p <alt port> <user>@<pivot ip> -NT
        Blue Private Host-1:
      ssh student@172.16.82.106 -D 9050 -NT

      proxychains ./scan.sh
      proxychains ssh student@10.10.0.40


      proxychain commands are ran from blue private host, directed to 10.10.0.40
      Blue Private Host-1:
      ssh student@172.16.82.106 -L 1111:10.10.0.40:22 -NT
      ssh student@localhost -D 9050 -p 1111 -NT

      proxychains curl ftp://www.onlineftp.ch
      proxychains wget -r www.espn.com
      proxychains ./scan.sh
      proxychains ssh student@172.16.101.2
ssh remote port forwarding
      ssh -p <optional alt port> <user>@<remote ip> -R <remote bind port>:<tgt ip>:<tgt port> -NT
      or
      ssh -R <remote bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<remote ip> -NT
     Blue Host-1
      ssh student@10.10.0.40 -R 1111:localhost:80 -NT
        ***Creates a remote port on the remote’s local host that forwards to the target specified
     
     Blue Private Host-1:
      ssh student@172.16.82.106 -R 1111:localhost:22 -NT
     Internet Host:
      ssh student@172.16.82.106 -L 2222:localhost:1111 -NT
     Internet Host:
      ssh localhost -p 2222
        ***Creates a remote port on a remote machine, staging a connection
        ***Also creates a local port on the localhost to connect to the previously staged connection.
   for i in {1..254} ;do (ping -c <NID>.$1 2>/dev/null | grep "bytes from" &) ;done
        
        
        
        
DAY6
      Configuring iptables
      iptables - IPv4 packet administration link::http://ipset.netfilter.org/iptables.man.html[(Manual)], link::http://ipset.netfilter.org/iptables-extensions.man.html[(Manual Extensions)]
      ip6tables - IPv6 packet administration link::http://ipset.netfilter.org/ip6tables.man.html[(Manual)]
      ebtables - Ethernet Bridge frame table administration link::https://linux.die.net/man/8/ebtables[(Manual)]
      arptables - arp packet administration link::https://linux.die.net/man/8/arptables[(Manual)]
      filter - default table. Used to ACCEPT, DROP or REJECT packets that match. Provides packet filtering.
      INPUT, FORWARD, and OUTPUT
      nat - used to translate private ←→ public address and ports.
      PREROUTING, POSTROUTING, and OUTPUT
      mangle - provides special packet alteration. Can modify various fields header fields.
      All Chains: PREROUTING, POSTROUTING, INPUT, FORWARD and OUTPUT.
      raw - used to configure exemptions from connection tracking.
      PREROUTING and OUTPUT
      security - used for Mantator Access Control (MAC) networkign rules.
      INPUT, FORWARD, and OUTPUT
      iptables Syntax
      iptables -t [table] -A [chain] [rules] -j [action]
      Rules:
      -i or -o [iface]
      -s or -d [ip.add | network/mask]
      -p [protocol] [--dport | --sport] [port | port1:port2]
      -m is used with:
        state --state [state]
        mac [--mac-source | --mac-destination] [mac]
        multiport -p [tcp | udp] [--sport | --dport | --port]
                [port1,port2,..port15]
        bpf --bytecode [ 'bytecode' ]
      [action] - ACCEPT (default), REJECT, DROP
      Basic iptables options
      -A              #Append a rule (bottom of list)
      -I              #Insert a rule (top of list)
      -D              #Delete a rule Syntax: iptables -D [chain][rule_#]
      -L              #List the rules by chains
      -P              #Changes the default policy for a chain Syntax: iptables -P [chain] [target]
      -S              #Show rules
      -p              #list a potocol (tcp,icmp,sctp,etc.)
      --sport         #address a specific port number
      --dport
      -d              #Destination Address
      -s              #Source Address
      -j              #jump to target action
      -n              #displays port number vice protocol
      -t              #specifies a table, default is filter
      --line numbers  #prints the rule number in output
      Modify iptables
      iptables -t [table] -F                                                    #Flush table
      iptables -t [table] -P [chain] [action]                                   #Change default policy
      iptables -t [table] -L --line-numbers                                     #Lists rules with rule numbers
      iptables -t [table] -I [chain] [rule num] [rules] -j [action]             #Inserts rule before Rule number
      iptables -t [table] -R [chain] [rule num] [rules] -j [action]             #Replaces rule at number
      iptables -t [table] -D [chain] [rule num]                                 #Deletes rule at number
      
      sudo iptables -A OUTPUT -p tcp -m state --state NEW,ESTABLISHED -m multiport --port 6010,6011,6012,6579,4444,22,23,3389 -j ACCEPT
      
      
      
      
      
      
      
      
      Create the Table
      nft add table [family] [table]
      [family] = ip, ip6, i, arp, bridge and netdev.
      [table] = user provided name for the table.
      Create the Base Chain
      nft add chain [family] [table] [chain] { type [type] hook [hook]
         priority [priority] \; policy [policy] \;}
      [chain] = User defined name for the chain.
      [type] = can be filter, route or nat.
      [hook] = prerouting, ingress, input, forward, output or postrouting.
      [priority] = user provided integer. Lower number = higher priority. default = 0. Use "--" before negative numbers.
      ; [policy] ; = set policy for the chain. Can be accept (default) or drop.
      Use "\" to escape the ";" in bash
      Create a rule in the Chain
      nft add rule [family] [table] [chain] [matches (matches)] [statement]
      [matches] = typically protocol headers(i.e. ip, ip6, tcp, udp, icmp, ether, etc)
      (matches) = these are specific to the [matches] field.
      [statement] = action performed when packet is matched. Some examples are: log, accept, drop, reject, counter, nat (dnat, snat, masquerade)
      Modify nftables
      nft {list | flush} ruleset
      nft {delete | list | flush } table [family] [table]
      nft {delete | list | flush } chain [family] [table] [chain]
      Modify nftables
      nft list table [family] [table] [-a]
      nft add rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]         #Adds after position
      nft insert rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]      #Inserts before position
      nft replace rule [family] [table] [chain] [handle <handle>] [matches (matches)] [statement]         #Replaces rule at handle
      nft delete rule [family] [table] [chain] [handle <handle>]                                          #Deletes rule
DAY7
      /etc/snort/rules
      sudo snort -r snort.log.1655811755
      see net.cybbh.io tbh 
      ps -ef | grep snort
      
      alert icmp any any -> any any (msg: "Cows"; content: "|DE AD BE EF|"; sid:1000001;)
      alert icmp any any -> 10.3.0.0/24 any (msg:"DMZ Ping";itype:8;icode:0;sid:1000002;)
      alert icmp any any -> any any (msg:ICMP detected; sid:111; rev:1;)
      alert ip any 3389 -> 10.1.0.0/16 3389 (msg:"RDP"; sid: 42069;)
      alert ip 10.1.0.0/16 33389 -> any 3389 (msg:"WEINER"; sid: 420699;)
      alert tcp any any -> any 22 (threshold:type both, track by_src, count 3, seconds 10; sid:1000003;)


      for i in {1..254} ;do (ping -c 1 192.168.1.$i 2>/dev/null | grep "bytes from" &) ;done
      nmap -Pn <IP> -p 21,22,23,80 -T4 --min-rate=8000
      
      sudo iptables -t mangle -A POSTROUTING -j TTL --ttl-set 255
      

      TUNNELING TO CAPSTONE 7 SSH
      ----------------------------

      inethost >> ssh net1_student11@10.50.27.11 -p 7777 -L 11110:localhost:7777
      inethost >> ssh net1_student11@localhost -p 11110 -L 11105:10.2.2.7:23
      inethost >> telnet localhost 11105
      cap-07   >> ssh net1_student11@10.2.2.6 -p 7777 -R 11120:localhost:2222
      inethost >> ssh net1_student11@10.50.27.11 -p 7777 -L 11130:localhost:11120
      inethost >> ssh net1_student11@localhost -p 11130 -D 9050

      ````````````````````````````````````````````````````````````````````````````````
      ADDITIONAL PIVOTING TO CAPSTONE 8 SSH
      ((contunuing from capstone 7))
      inethost >> ssh net1_student11@localhost -p 11130 -L 11150:10.10.10.140:301
      itethost >> ssh -p 11150 net1_Student11@localhost -D 9050
      +-------------------------------------------------------------------------------+

      ADDITIONAL PIVOTING TO CAPSTONE 10 SSH
      ((continuing from capstone 7))
      inethost >> ssh net1_student11@localhost -p 11130 -L 11160:10.10.10.167:404
      inethost >> ssh -p 11160 net1_student11@localhost -D 9050
      +--------------------------------------------------------------------------------+
      ADDITIONAL PIVOTING TO CAPSTONE 12 SSH
      (continuing from capstone 7))
      inethost >> ssh
      inethost >> ssh net1_student11@localhost -p 11130 -L 11190:10.10.10.182:504
      inethost >> ssh -p 11190 net1_student11@localhost -L 11191:192.168.10.101:22
      inethost >> ssh -p 11191 net1_student11@localhost -D 9050
      
      
      scp -P 32408 net3_student24@localhost:/usr/share/cctc/* .
      
        import socket
        ip = '----'
        port = ----
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect ((ip, port))
        #To send a string as bytes like object add the prefix b to the string. \n is used to go to the nextline
        s.send(b'----------')
        #It is recommended that the buffersize used with recvfrom is a power of 2 (even number) and not a very large number
        response, con = s.recvfrom(1024)
        #In order to receive a message that is sent as a bytes like object you must decode into uft-8 (this is default)
        print(response.decode())
        s.close()
      
      
      
      
      
      
      
      
